name: Pull Request

on:
  pull_request:
    branches: [ master, develop ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      # fail-fast: Default is true, switch to false to allow one platform to fail and still run others
      fail-fast: false
      matrix:
        os: [ubuntu-20.04] #, windows-2019, macos-10.15]
        include:
        - os: ubuntu-20.04
          PLATFORM_NAME: Linux
          CPACK_BINARY_DEB: ON
          CPACK_BINARY_IFW: OFF
          CPACK_BINARY_TGZ: ON
          CPACK_BINARY_ZIP: OFF
          BINARY_EXT: deb
          COMPRESSED_EXT: tar.gz
          BINARY_PKG_PATH: _CPack_Packages/Linux/DEB
          COMPRESSED_PKG_PATH: _CPack_Packages/Linux/TGZ
          BUILD_RUBY_BINDINGS: ON
          BUILD_PYTHON_BINDINGS: OFF
          BUILD_CSHARP_BINDINGS: OFF

    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{github.event.pull_request.head.ref}}
        repository: ${{github.event.pull_request.head.repo.full_name}}

    - uses: actions/setup-python@v2
      with:
        python-version: '3.8.x'

    - uses: actions/setup-ruby@v1
      with:
        ruby-version: '2.5'

    - name: Install system libraries
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt update
          sudo apt install -y cmake g++
        fi;

    - name: Install conan
      run: |
          python --version
          pip install conan
          conan --version
          echo "Enabling conan revisions and setting parallel_download"
          conan config set general.revisions_enabled=True
          conan config set general.parallel_download=8

    - name: Set OS-specific options and system dependencies
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      run: |
        echo BUILD_RUBY_BINDINGS=${{ matrix.BUILD_RUBY_BINDINGS }} >> $GITHUB_ENV
        echo BUILD_PYTHON_BINDINGS=${{ matrix.BUILD_PYTHON_BINDINGS }} >> $GITHUB_ENV
        echo BUILD_CSHARP_BINDINGS=${{ matrix.BUILD_CSHARP_BINDINGS }} >> $GITHUB_ENV

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      # NOTE: If you re-enable 'Download the OpenStudio installer' step, then pass `openstudio_DIR=$openstudio_DIR cmake [etc]`
      run: |
        mkdir -p build
        cd build
        echo $(pwd)
        cmake --version
        cmake -DBUILD_RUBY_BINDINGS=$BUILD_RUBY_BINDINGS -DBUILD_PYTHON_BINDINGS=$BUILD_PYTHON_BINDINGS -DBUILD_CSHARP_BINDINGS=$DBUILD_CSHARP_BINDINGS ../IsoModel/src

    - name: Build
      working-directory: ./build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --target all

    - name: Test
      working-directory: ./build
      shell: bash
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
          Xvfb :99 &
          export DISPLAY=:99
          ctest -j -T test --no-compress-output -C $BUILD_TYPE
