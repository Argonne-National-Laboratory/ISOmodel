The isomodel code uses CMake for compilation. 

OSX:

- Install CMake
	To get cmake to install aliases in /usr/bin, you can run from terminal with:
	sudo /Applications/CMake.app/Contents/MacOS/CMake
	and then Tools->Install for Command Line Use
- Install Boost

- Install gtest (Google C++ unit testing framework: https://code.google.com/p/googletest/)

To Generate the makefile:

1. Open terminal and cd to wherever you've cloned the isomodel.
2. mkdir obj then cd obj. The obj directory is where cmake will generate the makefiles and where the
actual compilation will take place. You can also call this release or debug if you want to
create separate directories for those.
3. Run: cmake -DCMAKE_BUILD_TYPE=(Release | Debug) -DGTEST_ROOT=X ../src. 
 * X should be the root location of gtest. For example if its in /Users/nick/src/gtest-1.7.0/
 then -DGTEST_ROOT=/Users/nick/src/gtest-1.7.0/. CMake will look in that directory for both 
 the gtest and gtest_main library and the headers.

If Boost is in some standard place 
such as /usr/local/include etc. then it should be found. If not you can specify where to find 
it with the flags: -DBoost_LIBRARY_DIR and -DBoost_INCLUDE_DIR

Windows:

- Install Visual Studio -- the free editions are fine
- Install CMake.
	During the install, you can choose to add the cmake executable to the PATH. 
	Make sure to do this.
- Install Boost 32 bit and 64 (additional notes at bottom)
- Install gtest (Google C++ unit testing framework: https://code.google.com/p/googletest/)
	Make sure to compile the dynamically linkable version of gtest (e.g., gtest-1.7.0/msvc/gtest-md.sln).
	Make sure to compile both a release and a debug version of gtest.

To generate an nmake (Visual Studio's "make") Makefile:

1. Start either the "VS2013 x64 Cross Tools Command Prompt" or the 
"VS2013 x86 Native Tools Command Prompt". These can found under Visual Studio -> Visual Studio Tools
in the start menu. The former is necessary to create a 64bit executable or library.

2. cd to wherever you cloned the isomodel to.

3. mkdir obj then cd obj. The obj directory is where cmake will generate the makefiles and where the
actual compilation will take place. You can also call this Release or Debug if you want to
create separate directories for those.

4.Run: cmake -DCMAKE_BUILD_TYPE=(Release | Debug) ../src -G "NMake Makefiles" -DBoost_LIBRARY_DIR=
C:/local/boost_1_55_0/lib64-msvc-12.0 -DBoost_INCLUDE_DIR=C:/local/boost_1_55_0 -DGTEST_ROOT=X
	* Choose Release or Debug as appropriate
	* Set the Boost_LIBRARY_DIR and the Boost_INCLUDE_DIR to wherever you've installed boost.
	  If you are doing a 64bit build then make sure to choose the 64bit library location.
	* X should be the root location of gtest. For example if its in /Users/nick/src/gtest-1.7.0/
 	  then -DGTEST_ROOT=/Users/nick/src/gtest-1.7.0/. CMake will look in that directory for both 
 	  the gtest and gtest_main library and the headers.
	  
5. Run: nmake. This will build the isomodel.dll, isomodel.lib and the isomodel_standalone.exe executable. 

To generate a Visual Studio Solution using cmake:

1. Do the same as above, up to step 4.

2. Run: cmake ../src -G "Visual Studio 12 2013 Win64"  -DBoost_LIBRARY_DIR=C:/local/boost_1_55_0/lib64-msvc-12.0 
-DBoost_INCLUDE_DIR=C:/local/boost_1_55_0 -DGTEST_ROOT=X

See the notes in step 4 above for more details.

Remove the Win64 if you are not doing a 64bit build.

Additional notes for installing 64-bit on windows
=================================================

Boost 64-bit
------------

You can build the 64-bit boost much like you build the 32-bit boost with b2. Just run the following (after running bootstrap):

./b2 --toolset=msvc-12.0 address-model=64 --build-type=complete --stagedir=stage\x64 stage

GTest 64-bit
------------

The instructions below were copied from: https://code.google.com/p/googletest/wiki/FAQ#How_do_I_generate_64-bit_binaries_on_Windows_%28using_Visual_Studi

"Load the supplied Visual Studio solution file, either msvc\gtest-md.sln or msvc\gtest.sln. Go through the migration wizard to migrate the solution and project files to Visual Studio 2008. Select Configuration Manager... from the Build menu. Select <New...> from the Active solution platform dropdown. Select x64 from the new platform dropdown, leave Copy settings from set to Win32 and Create new project platforms checked, then click OK. You now have Win32 and x64 platform configurations, selectable from the Standard toolbar, which allow you to toggle between building 32-bit or 64-bit binaries (or both at once using Batch Build)."

"In order to prevent build output files from overwriting one another, you'll need to change the Intermediate Directory settings for the newly created platform configuration across all the projects. To do this, multi-select (e.g. using shift-click) all projects (but not the solution) in the Solution Explorer. Right-click one of them and select Properties. In the left pane, select Configuration Properties, and from the Configuration dropdown, select All Configurations. Make sure the selected platform is x64. For the Intermediate Directory setting, change the value from $(PlatformName)\$(ConfigurationName) to $(OutDir)\$(ProjectName). Click OK and then build the solution. When the build is complete, the 64-bit binaries will be in the msvc\x64\Debug directory." 

NOTE: in order to make cmake happy, I had to move the Debug and Release directories from msvc\x64 into msvc\gtest or msvc\gtest-md (depending on which one I had just compiled) so that the directory structure looked exactly the same as if I had done the standard 32-bit compile. This allows FindGTest to automatically figure out whether it should be using gtest or gtest-md. In order to keep both a x86 and x64 version of gtest while still leaving the directories msvc/gtest and msvc/gtest-md with their default names, I made two copies of the root gtest folder, and put one in "Program Files" and compiled it 64-bit and put the other in "Program Files (x86)" and compiled it 32-bit. It's a little clunky, but it seems to work. - Brendan

I (Nick) got a 64 bit gtest to compile with CMake using the "VS2013 x64 Cross Tools Command Prompt" as the terminal and the following.

1. In wherever gtest is installed, mkdir Release
2. cd Release
3. cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Release
4. If I just did an nmake now, I would get a static library that also compiles in the static MS c/c++ runtime library.
When that gtest.lib is then linked into the isomodel_unit_test, the static MS runtime library conflicts with the
dynamic runtime library that the isomodel_unit_test executables links with (LNK2005 error). The solution is to

	a. "cmake-gui" to start the CMake gui.
	b. browse source to your gtest directory
	c. browse build to the Release directory.
	d. The CMake configuration cache should show up in the GUI. Scroll down and check gtest_force_shared_crt.
	e. Click configure, then generate
	f. nmake in the terminal to create static gtests libs that will use the dynamic ms crt.

5. Copy the two .lib files from Release to ..\lib if that's where the isomodel expects to find them.


Linking up all the 64-bit libraries with CMake
----------------------------------------------

In case it is helpful for anyone struggling to get everything working in 64-bit on windows, these two cmake commands both work on Brendan's machine on 2015-01-10.

cmake -DCMAKE_BUILD_TYPE=Release ../src -G "NMake Makefiles" -DBoost_LIBRARY_DIR="C:/Program Files/boost/boost_1_57_0/stage/x64/lib" -DBoost_INCLUDE_DIR="C:/Program Files/boost/boost_1_57_0" -DGTEST_ROOT="C:/Program Files/gtest-1.7.0"

or

cmake -DCMAKE_BUILD_TYPE=Release ../src -G "Visual Studio 12 2013 Win64" -DBoost_LIBRARY_DIR="C:/Program Files/boost/boost_1_57_0/stage/x64/lib" -DBoost_INCLUDE_DIR="C:/Program Files/boost/boost_1_57_0" -DGTEST_ROOT="C:/Program Files/gtest-1.7.0"
